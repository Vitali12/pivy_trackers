    #def button_event(self, arg):
        """
        Override base implementation
        """
"""
        super().button_event(arg)

        if self.is_selected() and MouseState().button1.state != 'UP':
            self.dispatch(Events.NODE.SELECTED, (self.name, self.point))
"""
    #def start_drag(self):
        """
        Initialize drag ops
        """
"""
        if not self.is_selected():
            return

        super().start_drag()

        self.drag_point = self.point

        if self == DragState().drag_node:
            MouseState().set_mouse_position(self.point)
"""
    #def on_drag(self):
        """
        Override of base function
        """
""""
        if not (self.drag_point and DragState().drag_node):
            return

        super().on_drag()

        self.update_drag_point()
"""
    #def end_drag(self):
        """
        Override of base function
        """
"""
        if self.drag_point and DragState().drag_node and not DragState().abort:
            self.update_drag_point()
            self.update(self.drag_point)

        super().end_drag()
"""
    #def notify(self, event_type, message):
        """
        Override of Subscribe method
        """
"""
        super().notify(event_type, message, True)

        if not self.is_selected():
            return

        if event_type != Events.NODE.UPDATE:
            return

        _coord = message[1]

        if not isinstance(_coord, tuple):
            _coord = tuple(_coord)

        if len(_coord) == 2:
            _coord = _coord + (0.0,)

        self.update(_coord, True)
"""
    #def update_drag_point(self):
        """
        Update the drag point based on the selection method
        """
"""
        if self.select_state == 'MANUAL':
            self.drag_point = \
                self.drag_copy.getChild(3).point.getValues()[0].getValue()

        else:
            self.drag_point = tuple(ViewState().transform_points(
                [self.point], DragState().node_group)[0])

        self.drag_point = self.drag_point[0:3]

        #notify node updatefor sake of curve changes
        self.dispatch(Events.NODE.UPDATED, (self.name, self.drag_point), True)
"""
